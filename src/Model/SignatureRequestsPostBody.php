<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace IIYousign\Model;

class SignatureRequestsPostBody
{
    /**
     * Name of the signature request.
     *
     * @var string
     */
    protected $name;
    /**
     * Delivery mode to notify signers.
     *
     * @var string
     */
    protected $deliveryMode;
    /**
     * Enable an ordered workflow, each signer will be requested to sign in a sequential order.
     *
     * @var bool|null
     */
    protected $orderedSigners;
    /**
     * Enable automatic reminders for pending signers.
     *
     * @var SignatureRequestsPostBodyReminderSettings|null
     */
    protected $reminderSettings;
    /**
     * tz database format.
     *
     * @var string|null
     */
    protected $timezone = 'Europe/Paris';
    /**
     * A custom note added to emails sent to signers.
     *
     * @var string|null
     */
    protected $emailCustomNote;
    /**
     * Due date of the signature request. Default to 6 month after the activation.
     *
     * @var \DateTime|null
     */
    protected $expirationDate;
    /**
     * Create a signature request from an existing template.
     *
     * @var string|null
     */
    protected $templateId;
    /**
     * Store a custom id that will be added to webhooks & appended to redirect urls.
     *
     * @var string|null
     */
    protected $externalId;
    /**
     * Use a specific branding to customize the signature experience.
     *
     * @var string|null
     */
    protected $brandingId;
    /**
     * You can directly attach orphan documents to the signature request.
     *
     * @var string[]|null
     */
    protected $documents;
    /**
     * Can only be used if you add documents at the same time.
     *
     * @var SignatureRequestSignerFromInfoInput[]|null
     */
    protected $signers;
    /**
     * @var SignatureRequestsPostBodyCustomText|null
     */
    protected $customText;

    /**
     * Name of the signature request.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Name of the signature request.
     */
    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Delivery mode to notify signers.
     */
    public function getDeliveryMode(): string
    {
        return $this->deliveryMode;
    }

    /**
     * Delivery mode to notify signers.
     */
    public function setDeliveryMode(string $deliveryMode): self
    {
        $this->deliveryMode = $deliveryMode;

        return $this;
    }

    /**
     * Enable an ordered workflow, each signer will be requested to sign in a sequential order.
     */
    public function getOrderedSigners(): ?bool
    {
        return $this->orderedSigners;
    }

    /**
     * Enable an ordered workflow, each signer will be requested to sign in a sequential order.
     */
    public function setOrderedSigners(?bool $orderedSigners): self
    {
        $this->orderedSigners = $orderedSigners;

        return $this;
    }

    /**
     * Enable automatic reminders for pending signers.
     */
    public function getReminderSettings(): ?SignatureRequestsPostBodyReminderSettings
    {
        return $this->reminderSettings;
    }

    /**
     * Enable automatic reminders for pending signers.
     */
    public function setReminderSettings(?SignatureRequestsPostBodyReminderSettings $reminderSettings): self
    {
        $this->reminderSettings = $reminderSettings;

        return $this;
    }

    /**
     * tz database format.
     */
    public function getTimezone(): ?string
    {
        return $this->timezone;
    }

    /**
     * tz database format.
     */
    public function setTimezone(?string $timezone): self
    {
        $this->timezone = $timezone;

        return $this;
    }

    /**
     * A custom note added to emails sent to signers.
     */
    public function getEmailCustomNote(): ?string
    {
        return $this->emailCustomNote;
    }

    /**
     * A custom note added to emails sent to signers.
     */
    public function setEmailCustomNote(?string $emailCustomNote): self
    {
        $this->emailCustomNote = $emailCustomNote;

        return $this;
    }

    /**
     * Due date of the signature request. Default to 6 month after the activation.
     */
    public function getExpirationDate(): ?\DateTime
    {
        return $this->expirationDate;
    }

    /**
     * Due date of the signature request. Default to 6 month after the activation.
     */
    public function setExpirationDate(?\DateTime $expirationDate): self
    {
        $this->expirationDate = $expirationDate;

        return $this;
    }

    /**
     * Create a signature request from an existing template.
     */
    public function getTemplateId(): ?string
    {
        return $this->templateId;
    }

    /**
     * Create a signature request from an existing template.
     */
    public function setTemplateId(?string $templateId): self
    {
        $this->templateId = $templateId;

        return $this;
    }

    /**
     * Store a custom id that will be added to webhooks & appended to redirect urls.
     */
    public function getExternalId(): ?string
    {
        return $this->externalId;
    }

    /**
     * Store a custom id that will be added to webhooks & appended to redirect urls.
     */
    public function setExternalId(?string $externalId): self
    {
        $this->externalId = $externalId;

        return $this;
    }

    /**
     * Use a specific branding to customize the signature experience.
     */
    public function getBrandingId(): ?string
    {
        return $this->brandingId;
    }

    /**
     * Use a specific branding to customize the signature experience.
     */
    public function setBrandingId(?string $brandingId): self
    {
        $this->brandingId = $brandingId;

        return $this;
    }

    /**
     * You can directly attach orphan documents to the signature request.
     *
     * @return string[]|null
     */
    public function getDocuments(): ?array
    {
        return $this->documents;
    }

    /**
     * You can directly attach orphan documents to the signature request.
     *
     * @param string[]|null $documents
     */
    public function setDocuments(?array $documents): self
    {
        $this->documents = $documents;

        return $this;
    }

    /**
     * Can only be used if you add documents at the same time.
     *
     * @return SignatureRequestSignerFromInfoInput[]|null
     */
    public function getSigners(): ?array
    {
        return $this->signers;
    }

    /**
     * Can only be used if you add documents at the same time.
     *
     * @param SignatureRequestSignerFromInfoInput[]|null $signers
     */
    public function setSigners(?array $signers): self
    {
        $this->signers = $signers;

        return $this;
    }

    public function getCustomText(): ?SignatureRequestsPostBodyCustomText
    {
        return $this->customText;
    }

    public function setCustomText(?SignatureRequestsPostBodyCustomText $customText): self
    {
        $this->customText = $customText;

        return $this;
    }
}
