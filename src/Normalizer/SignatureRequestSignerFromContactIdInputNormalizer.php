<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace IIYousign\Normalizer;

use IIYousign\Runtime\Normalizer\CheckArray;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SignatureRequestSignerFromContactIdInputNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;

    public function supportsDenormalization($data, $type, $format = null): bool
    {
        return $type === 'IIYousign\\Model\\SignatureRequestSignerFromContactIdInput';
    }

    public function supportsNormalization($data, $format = null): bool
    {
        return is_object($data) && get_class($data) === 'IIYousign\\Model\\SignatureRequestSignerFromContactIdInput';
    }

    /**
     * @return mixed
     */
    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \IIYousign\Model\SignatureRequestSignerFromContactIdInput();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('contact_id', $data)) {
            $object->setContactId($data['contact_id']);
        }
        if (\array_key_exists('fields', $data)) {
            $values = [];
            foreach ($data['fields'] as $value) {
                $values[] = $value;
            }
            $object->setFields($values);
        }
        if (\array_key_exists('signature_level', $data)) {
            $object->setSignatureLevel($data['signature_level']);
        }
        if (\array_key_exists('signature_authentication_mode', $data) && $data['signature_authentication_mode'] !== null) {
            $object->setSignatureAuthenticationMode($data['signature_authentication_mode']);
        } elseif (\array_key_exists('signature_authentication_mode', $data) && $data['signature_authentication_mode'] === null) {
            $object->setSignatureAuthenticationMode(null);
        }
        if (\array_key_exists('redirect_urls', $data)) {
            $object->setRedirectUrls($this->denormalizer->denormalize($data['redirect_urls'], 'IIYousign\\Model\\SignatureRequestSignerFromContactIdInputRedirectUrls', 'json', $context));
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if (null !== $object->getContactId()) {
            $data['contact_id'] = $object->getContactId();
        }
        if (null !== $object->getFields()) {
            $values = [];
            foreach ($object->getFields() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['fields'] = $values;
        }
        if (null !== $object->getSignatureLevel()) {
            $data['signature_level'] = $object->getSignatureLevel();
        }
        if (null !== $object->getSignatureAuthenticationMode()) {
            $data['signature_authentication_mode'] = $object->getSignatureAuthenticationMode();
        }
        if (null !== $object->getRedirectUrls()) {
            $data['redirect_urls'] = $this->normalizer->normalize($object->getRedirectUrls(), 'json', $context);
        }

        return $data;
    }
}
