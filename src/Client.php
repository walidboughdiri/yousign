<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace IIYousign;

use Http\Client\Common\Plugin\AuthenticationPlugin;
use Http\Message\Authentication\Bearer;

class Client extends \IIYousign\Runtime\Client\Client
{
    /**
     * List signature requests.
     *
     * @param array $queryParameters {
     *
     *     @var string $status Filter by status
     *     @var string $after After cursor (pagination)
     *     @var string $external_id Filter by external_id
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequestsGetResponse200|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsBadRequestException
     * @throws \IIYousign\Exception\GetSignatureRequestsUnauthorizedException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequests(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequests($queryParameters), $fetch);
    }

    /**
     * Initiate a new signature request.
     *
     * @param \IIYousign\Model\SignatureRequestsPostBody|null $requestBody
     * @param string                                          $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequest|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsUnauthorizedException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequests(?Model\SignatureRequestsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequests($requestBody), $fetch);
    }

    /**
     * List signature request documents.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param array  $queryParameters    {
     *
     *     @var string $nature filter by nature
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Document[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsBadRequestException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsUnauthorizedException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsForbiddenException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestIdDocuments(string $signatureRequestId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestIdDocuments($signatureRequestId, $queryParameters), $fetch);
    }

    /**
     * Add document to a signature request.
     *
     * @param string                                                                     $signatureRequestId Signature Request Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdDocumentsPostBody|null $requestBody
     * @param string                                                                     $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Document|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdDocuments(string $signatureRequestId, ?Model\SignatureRequestsSignatureRequestIdDocumentsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdDocuments($signatureRequestId, $requestBody), $fetch);
    }

    /**
     * Delete a signature request (in draft status).
     *
     * @param string $signatureRequestId Signature Request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdBadRequestException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdUnauthorizedException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdForbiddenException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function deleteSignatureRequestsSignatureRequestId(string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\DeleteSignatureRequestsSignatureRequestId($signatureRequestId), $fetch);
    }

    /**
     * Fetch a signature request.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequest|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdBadRequestException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdUnauthorizedException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdForbiddenException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestId(string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestId($signatureRequestId), $fetch);
    }

    /**
     * Update a Signature Request.
     *
     * @param string                                                             $signatureRequestId Signature Request Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdPatchBody|null $requestBody
     * @param string                                                             $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequest|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdBadRequestException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdUnauthorizedException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdForbiddenException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function patchSignatureRequestsSignatureRequestId(string $signatureRequestId, ?Model\SignatureRequestsSignatureRequestIdPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PatchSignatureRequestsSignatureRequestId($signatureRequestId, $requestBody), $fetch);
    }

    /**
     * Create new followers.
     *
     * @param string                                                                           $signatureRequestId Signature Request Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdFollowersPostBodyItem[]|null $requestBody
     * @param string                                                                           $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequestsSignatureRequestIdFollowersPostResponse201Item[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdFollowersBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdFollowersUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdFollowersForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdFollowersNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdFollowers(string $signatureRequestId, ?array $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdFollowers($signatureRequestId, $requestBody), $fetch);
    }

    /**
     * List signers from a signature request.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Signer[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdSignersUnauthorizedException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestIdSigners(string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestIdSigners($signatureRequestId), $fetch);
    }

    /**
     * Create a new signer.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Signer|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdSigners(string $signatureRequestId, ?\stdClass $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdSigners($signatureRequestId, $requestBody), $fetch);
    }

    /**
     * Activate a signature request.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequestActivated|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignaturesBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignaturesUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignaturesForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignaturesNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdSignatures(string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdSignatures($signatureRequestId), $fetch);
    }

    /**
     * Cancel a signature request.
     *
     * @param string                                                                  $signatureRequestId Signature Request Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdCancelPostBody|null $requestBody
     * @param string                                                                  $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequest|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdCancelBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdCancelUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdCancelForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdCancelNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdCancel(string $signatureRequestId, ?Model\SignatureRequestsSignatureRequestIdCancelPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdCancel($signatureRequestId, $requestBody), $fetch);
    }

    /**
     * List all users.
     *
     * @param array $queryParameters {
     *
     *     @var string $after After cursor (pagination)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\UsersGetResponse200|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetUsersBadRequestException
     * @throws \IIYousign\Exception\GetUsersUnauthorizedException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getUsers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetUsers($queryParameters), $fetch);
    }

    /**
     * Delete a signer.
     *
     * @param string $signerId           Signer id
     * @param string $signatureRequestId Signature request id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdSignersSignerIdBadRequestException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdSignersSignerIdUnauthorizedException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdSignersSignerIdForbiddenException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdSignersSignerIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function deleteSignatureRequestsSignatureRequestIdSignersSignerId(string $signerId, string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\DeleteSignatureRequestsSignatureRequestIdSignersSignerId($signerId, $signatureRequestId), $fetch);
    }

    /**
     * Get a signer.
     *
     * @param string $signerId           Signer id
     * @param string $signatureRequestId Signature request id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Signer|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignersSignersIdUnauthorizedException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignersSignersId(string $signerId, string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignersSignersId($signerId, $signatureRequestId), $fetch);
    }

    /**
     * Update a signer.
     *
     * @param string                                                                            $signerId           Signer id
     * @param string                                                                            $signatureRequestId Signature request id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdSignersSignerIdPatchBody|null $requestBody
     * @param string                                                                            $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Signer|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdSignersSignerIdBadRequestException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdSignersSignerIdUnauthorizedException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdSignersSignerIdForbiddenException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdSignersSignerIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function patchSignatureRequestsSignatureRequestIdSignersSignerId(string $signerId, string $signatureRequestId, ?Model\SignatureRequestsSignatureRequestIdSignersSignerIdPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PatchSignatureRequestsSignatureRequestIdSignersSignerId($signerId, $signatureRequestId, $requestBody), $fetch);
    }

    /**
     * Send manual reminder to signer.
     *
     * @param string $signerId           Signer id
     * @param string $signatureRequestId Signature request id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdSignersSignerIdSendReminderNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder(string $signerId, string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdSignersSignerIdSendReminder($signerId, $signatureRequestId), $fetch);
    }

    /**
     * Delete a document.
     *
     * @param string $signatureRequestId Signature request Id
     * @param string $documentId         Document Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdDocumentsDocumentIdBadRequestException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdDocumentsDocumentIdUnauthorizedException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdDocumentsDocumentIdForbiddenException
     * @throws \IIYousign\Exception\DeleteSignatureRequestsSignatureRequestIdDocumentsDocumentIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function deleteSignatureRequestsSignatureRequestIdDocumentsDocumentId(string $signatureRequestId, string $documentId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\DeleteSignatureRequestsSignatureRequestIdDocumentsDocumentId($signatureRequestId, $documentId), $fetch);
    }

    /**
     * Get a document.
     *
     * @param string $signatureRequestId Signature request Id
     * @param string $documentId         Document Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Document|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsDocumentIdUnauthorizedException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsDocumentIdForbiddenException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsDocumentIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestIdDocumentsDocumentId(string $signatureRequestId, string $documentId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestIdDocumentsDocumentId($signatureRequestId, $documentId), $fetch);
    }

    /**
     * Update a document.
     *
     * @param string                                                                                $signatureRequestId Signature request Id
     * @param string                                                                                $documentId         Document Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdDocumentsDocumentIdPatchBody|null $requestBody
     * @param string                                                                                $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Document|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdDocumentsDocumentIdBadRequestException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdDocumentsDocumentIdUnauthorizedException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdDocumentsDocumentIdForbiddenException
     * @throws \IIYousign\Exception\PatchSignatureRequestsSignatureRequestIdDocumentsDocumentIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function patchSignatureRequestsSignatureRequestIdDocumentsDocumentId(string $signatureRequestId, string $documentId, ?Model\SignatureRequestsSignatureRequestIdDocumentsDocumentIdPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PatchSignatureRequestsSignatureRequestIdDocumentsDocumentId($signatureRequestId, $documentId, $requestBody), $fetch);
    }

    /**
     * Replace a document in a signature request.
     *
     * @param string                                                                                      $signatureRequestId Signature Request Id
     * @param string                                                                                      $documentId         Document Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdDocumentsDocumentIdReplacePostBody|null $requestBody
     * @param string                                                                                      $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Document|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplaceBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplaceUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplaceForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplaceNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace(string $signatureRequestId, string $documentId, ?Model\SignatureRequestsSignatureRequestIdDocumentsDocumentIdReplacePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdDocumentsDocumentIdReplace($signatureRequestId, $documentId, $requestBody), $fetch);
    }

    /**
     * Reactivate a signature request.
     *
     * @param string                                                                      $signatureRequestId Signature Request Id
     * @param \IIYousign\Model\SignatureRequestsSignatureRequestIdReactivatePostBody|null $requestBody
     * @param string                                                                      $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequest|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdReactivateBadRequestException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdReactivateUnauthorizedException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdReactivateForbiddenException
     * @throws \IIYousign\Exception\PostSignatureRequestsSignatureRequestIdReactivateNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postSignatureRequestsSignatureRequestIdReactivate(string $signatureRequestId, ?Model\SignatureRequestsSignatureRequestIdReactivatePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostSignatureRequestsSignatureRequestIdReactivate($signatureRequestId, $requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\WebhookSubscription[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetWebhooksUnauthorizedException
     * @throws \IIYousign\Exception\GetWebhooksForbiddenException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getWebhooks(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetWebhooks(), $fetch);
    }

    /**
     * Configure a new webhook.
     *
     * @param \IIYousign\Model\WebhooksPostBody|null $requestBody
     * @param string                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\WebhookSubscription|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostWebhooksSubscriptionsBadRequestException
     * @throws \IIYousign\Exception\PostWebhooksSubscriptionsUnauthorizedException
     * @throws \IIYousign\Exception\PostWebhooksSubscriptionsForbiddenException
     * @throws \IIYousign\Exception\PostWebhooksSubscriptionsNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postWebhooksSubscriptions(?Model\WebhooksPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostWebhooksSubscriptions($requestBody), $fetch);
    }

    /**
     * Unsubscribe a webhook.
     *
     * @param string $webhookId Webhook Id
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \IIYousign\Exception\DeleteWebhooksWebhookIdBadRequestException
     * @throws \IIYousign\Exception\DeleteWebhooksWebhookIdUnauthorizedException
     * @throws \IIYousign\Exception\DeleteWebhooksWebhookIdForbiddenException
     * @throws \IIYousign\Exception\DeleteWebhooksWebhookIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function deleteWebhooksWebhookId(string $webhookId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\DeleteWebhooksWebhookId($webhookId), $fetch);
    }

    /**
     * Get a webhook.
     *
     * @param string $webhookId Webhook Id
     * @param string $fetch     Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\WebhookSubscription|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetWebhooksWebhookIdUnauthorizedException
     * @throws \IIYousign\Exception\GetWebhooksWebhookIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getWebhooksWebhookId(string $webhookId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetWebhooksWebhookId($webhookId), $fetch);
    }

    /**
     * Update a webhook.
     *
     * @param string                                           $webhookId   Webhook Id
     * @param \IIYousign\Model\WebhooksWebhookIdPatchBody|null $requestBody
     * @param string                                           $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\WebhookSubscription|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PatchWebhooksWebhookIdBadRequestException
     * @throws \IIYousign\Exception\PatchWebhooksWebhookIdUnauthorizedException
     * @throws \IIYousign\Exception\PatchWebhooksWebhookIdForbiddenException
     * @throws \IIYousign\Exception\PatchWebhooksWebhookIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function patchWebhooksWebhookId(string $webhookId, ?Model\WebhooksWebhookIdPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PatchWebhooksWebhookId($webhookId, $requestBody), $fetch);
    }

    /**
     * Download signature request documents.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param array  $queryParameters    {
     *
     *     @var string $version specify documents version to download, "completed" is only available when the signature request status is "done"
     *     @var bool $archive Force zip archive download
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsDownloadBadRequestException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsDownloadUnauthorizedException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdDocumentsDownloadNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestIdDocumentsDownload(string $signatureRequestId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestIdDocumentsDownload($signatureRequestId, $queryParameters), $fetch);
    }

    /**
     * Download signature request audit trails.
     *
     * @param string $signatureRequestId Signature Request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdAuditTrailsDownloadBadRequestException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdAuditTrailsDownloadUnauthorizedException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdAuditTrailsDownloadNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestIdAuditTrailsDownload(string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestIdAuditTrailsDownload($signatureRequestId), $fetch);
    }

    /**
     * List all contacts.
     *
     * @param array $queryParameters {
     *
     *     @var string $after After cursor (pagination)
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\ContactsGetResponse200|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetContactsBadRequestException
     * @throws \IIYousign\Exception\GetContactsUnauthorizedException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getContacts(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetContacts($queryParameters), $fetch);
    }

    /**
     * Create a contact.
     *
     * @param \IIYousign\Model\ContactsPostBody|null $requestBody
     * @param string                                 $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Contact|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostContactsBadRequestException
     * @throws \IIYousign\Exception\PostContactsUnauthorizedException
     * @throws \IIYousign\Exception\PostContactsForbiddenException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postContacts(?Model\ContactsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostContacts($requestBody), $fetch);
    }

    /**
     * Download audit trail PDF.
     *
     * @param string $signerId           Signer Id
     * @param string $signatureRequestId Signature request Id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignersSignerIdAuditTrailsDownloadBadRequestException
     * @throws \IIYousign\Exception\GetSignersSignerIdAuditTrailsDownloadUnauthorizedException
     * @throws \IIYousign\Exception\GetSignersSignerIdAuditTrailsDownloadNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignersSignerIdAuditTrailsDownload(string $signerId, string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignersSignerIdAuditTrailsDownload($signerId, $signatureRequestId), $fetch);
    }

    /**
     * Get signer audit trail.
     *
     * @param string $signerId           Signer id
     * @param string $signatureRequestId Signature request id
     * @param string $fetch              Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\SignatureRequestsSignatureRequestIdSignersSignerIdAuditTrailsGetResponse200|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrailsBadRequestException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrailsUnauthorizedException
     * @throws \IIYousign\Exception\GetSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrailsNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails(string $signerId, string $signatureRequestId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetSignatureRequestsSignatureRequestIdSignersSignerIdAuditTrails($signerId, $signatureRequestId), $fetch);
    }

    /**
     * Get signatures consumption by source.
     *
     * @param array $queryParameters {
     *
     *     @var string $from "from" date must be inferior or equal to "to"
     *     @var string $to
     *     @var string $authentication_key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\ConsumptionsGetResponse200|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetConsumptionsBadRequestException
     * @throws \IIYousign\Exception\GetConsumptionsUnauthorizedException
     * @throws \IIYousign\Exception\GetConsumptionsNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getConsumptions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetConsumptions($queryParameters), $fetch);
    }

    /**
     * Get a binary .csv file containing all the underlying data of signatures consumption.
     *
     * @param array $queryParameters {
     *
     *     @var string $from "from" date must be inferior or equal to "to"
     *     @var string $to
     *     @var string $authentication_key
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetConsumptionsExportBadRequestException
     * @throws \IIYousign\Exception\GetConsumptionsExportUnauthorizedException
     * @throws \IIYousign\Exception\GetConsumptionsExportForbiddenException
     * @throws \IIYousign\Exception\GetConsumptionsExportNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getConsumptionsExport(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetConsumptionsExport($queryParameters), $fetch);
    }

    /**
     * Delete a contact.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws \IIYousign\Exception\DeleteContactsContactIdUnauthorizedException
     * @throws \IIYousign\Exception\DeleteContactsContactIdForbiddenException
     * @throws \IIYousign\Exception\DeleteContactsContactIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function deleteContactsContactId(string $contactId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\DeleteContactsContactId($contactId), $fetch);
    }

    /**
     * Get a contact.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Contact|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\GetContactContactIdNotFoundException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function getContactContactId(string $contactId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\GetContactContactId($contactId), $fetch);
    }

    /**
     * Upload a document.
     *
     * @param \IIYousign\Model\UploadDocumentInput|null $requestBody
     * @param string                                    $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \IIYousign\Model\Document|\Psr\Http\Message\ResponseInterface
     *
     * @throws \IIYousign\Exception\PostDocumentsBadRequestException
     * @throws \IIYousign\Exception\PostDocumentsUnauthorizedException
     * @throws \IIYousign\Exception\PostDocumentsForbiddenException
     * @throws \IIYousign\Exception\UnexpectedStatusCodeException
     */
    public function postDocuments(?Model\UploadDocumentInput $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \IIYousign\Endpoint\PostDocuments($requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = array(), array $additionalNormalizers = array())
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = array();
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUrlFactory()->createUri('https://api-sandbox.yousign.app/v3');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);

            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = array(new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new \IIYousign\Normalizer\JaneObjectNormalizer());
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, array(new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(array('json_decode_associative' => true)))));
        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
